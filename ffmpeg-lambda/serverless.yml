# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ffmpeg-lambda
plugins:
  - serverless-plugin-typescript
  - serverless-offline
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
 region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
# He needs dynamodb for themes n shit? yeah
# He needs S3 for uploads
 iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:ListBucket"
       - "s3:PutObject"
       - "s3:GetObject"
     Resource: 
       Fn::Join:
         - ""
         - - "arn:aws:s3:::"
           - "Ref" : "carp-files"
           - "/*"
   - Effect: "Allow"
     Action:
       - "s3:ListBucket"
       - "s3:PutObject"
       - "s3:GetObject"
     Resource:
       Fn::Join:
         - ""
         - - "arn:aws:s3:::"
           - "Ref" : "carp-videos"
           - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  register:
    handler: src/auth.register
    events:
      - http:
          path: register
          method: get
          cors: true
  login:
    handler: src/auth.login
    events:
      - http:
          path: login
          method: post
          cors: true
  logout:
    handler: src/auth.logout
    events:
      - http:
          path: logout
          method: post
          cors: true

  getUploadUrl:
    handler: src/upload-url.get
    events:
      - http:
          path: get-upload-url
          method: post
          cors: true

  vision:
    handler: src/vision.vision
    events:
      - http:
          path: vision
          method: post
          cors: true
  render:
    handler: src/render.render
    events:
      - http:
          path: render
          method: post
          cors: true

  video:
    handler: src/videos.get
    events:
      - http:
          path: videos/{id}
          method: get
          cors: true
  videos:
    handler: src/videos.getAll
    events:
      - http:
          path: videos
          method: get
          cors: true

  file:
    handler: src/files.get
    events:
      - http:
          path: files/{id}
          method: get
          cors: true
  deleteFile:
    handler: src/files.delete
    events:
      - http:
          path: files/{id}
          method: delete
          cors: true
  files:
    handler: src/files.getAll
    events:
      - http:
          path: files
          method: get
          cors: true

  getThemes:
    handler: src/themes.getAll
    events:
      - http:
          path: themes
          method: get
          cors: true
  createThemes:
    handler: src/themes.create
    events:
      - http:
          path: themes
          method: post
          cors: true
  deleteTheme:
    handler: src/themes.delete
    events:
      - http:
          path: themes/{id}
          method: delete
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
